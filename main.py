# main.py

import os
import tempfile
from fastapi import FastAPI, Body, Query
from fastapi.responses import HTMLResponse, FileResponse, JSONResponse
from typing import Dict
import requests
import urllib.parse

# Our modules
from procurement.vendor_data import VENDORS, FINALIZED_POS
from po_order.po_generation import generate_po_pdf
from scraper.fakestore_scraper import import_fakestore_data
from scraper.aggregator import recommend_items

app = FastAPI(
    title="AI Procurement (Multi-Step Demo)",
    description="A single-page web interface with multiple steps for procurement, PDF/Email finalization, modularized.",
    version="1.0.0"
)

@app.get("/", response_class=HTMLResponse)
def index():
    """Serve the multi-step UI from templates/index.html."""
    with open("templates/index.html", encoding="utf-8") as f:
        return f.read()

@app.get("/pos")
def get_finalized_pos():
    return FINALIZED_POS

@app.post("/save-po")
def save_po(po_data: dict = Body(...)):
    FINALIZED_POS.append(po_data)
    return {"status": "saved"}

@app.get("/import-fakestore")
def import_fakestore(category: str = Query(None)):
    global VENDORS
    try:
        data = import_fakestore_data(category)
        for p in data:
            VENDORS.append({
                "name": "FakeStore Vendor",
                "item": p["title"],
                "price": p["price"],
                "stock": 50,
                "sku": f"fakestore-{p['id']}"
            })
        return {"message": f"Added {len(data)} products from Fake Store API to 'FakeStore Vendor'."}
    except Exception as e:
        return {"error": str(e)}

@app.post("/recommend")
def recommend_api(payload: dict = Body(...)):
    item_name = payload.get("item_name","Laptop")
    quantity = int(payload.get("quantity",1))
    preference = payload.get("preference","cost")
    multi_vendor = payload.get("multi_vendor",False)
    custom_sellers = payload.get("custom_sellers",[])

    results = recommend_items(item_name, quantity, preference, multi_vendor, custom_sellers, VENDORS)
    return {"options": results}

@app.post("/finalize-po")
def finalize_po(payload: dict = Body(...)):
    po_data = payload.get("po_data")
    mode = payload.get("mode")
    recipient_email = payload.get("recipient_email","")

    if not po_data or not mode:
        return {"error": "Missing 'po_data' or 'mode' in the request"}

    if mode == "pdf":
        pdf_bytes = generate_po_pdf(po_data)
        with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp:
            tmp.write(pdf_bytes)
            tmp.flush()
            return FileResponse(
                path=tmp.name,
                filename="purchase_order.pdf",
                media_type="application/pdf"
            )

    elif mode == "email":
        if not recipient_email:
            return {"error": "recipient_email is required if mode=email"}

        subject = "Purchase Order"
        body = f"""Purchase Order:
Vendor: {po_data['vendor_name']}
Product: {po_data['product_name']}
Quantity: {po_data['quantity']}
Unit Price: ${po_data['unit_price']}
Total Cost: ${po_data['total_cost']}

Generated by AI Procurement Demo
"""
        subject_enc = urllib.parse.quote(subject, safe='')
        body_enc = urllib.parse.quote(body, safe='')
        mailto_link = f"mailto:{recipient_email}?subject={subject_enc}&body={body_enc}"
        return {"mailto_link": mailto_link}

    else:
        return {"error": f"Unknown mode '{mode}'."}


